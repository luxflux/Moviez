class MovieDecorator < Draper::Base
  decorates :movie

  allows :id, :title, :disc_number, :watched, :overview, :tagline, :user_id

  def image
    if movie.image_url
      movie.image_url
    else
      'http://www.placehold.it/100x150'
    end
  end

  def url
    h.movie_path movie
  end

  def disc_number
    movie.disc_number ? movie.disc_number : h.t('movie.disc_number.none')
  end

  def watched
    h.t("movie.watched.#{movie.watched?}")
  end

  def disc_number_and_watched
    [disc_number, watched.camelize(:lower)].to_sentence
  end

  def as_json(options = {})
    {
      id: id,
      title: title,
      disc_number: disc_number,
      watched: watched,
      overview: overview,
      image: image,
      url: url,
      tagline: tagline,
      disc_number_and_watched: disc_number_and_watched,
      user_id: user_id
    }
  end

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end
