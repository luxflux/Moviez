#!/usr/bin/env ruby

VIDEODB_HOST = 'localhost'
VIDEODB_USER = 'root'
VIDEODB_PASS = 'bw3flgkm7'
VIDEODB_DATABASE = 'videodb'
MOVIEZZ_SITE = 'http://moviez.dev'

PROGRESS_BAR_OPTIONS = [:bar, :counter, :percentage, :eta, :rate]

require 'mysql2'
require 'her'
require 'terminal-table'
require 'highline/import'
require 'progress_bar'

class JSONRequest < Faraday::Middleware
  def initialize(app, options={})
    @app = app
  end
  def call(env)
    env[:request_headers]['Accept'] = 'application/json'
    @app.call(env)
  end
end

Her::API.setup :url => MOVIEZZ_SITE do |connection|
  connection.use JSONRequest
  connection.use Faraday::Request::UrlEncoded
  connection.use Her::Middleware::DefaultParseJSON
  connection.use Faraday::Adapter::NetHttp
end

class TMDBMovie
  include Her::Model

  def self.find_by_title(title)
    get_collection '/tmdb_movies', title: title
  end
end

class Movie
  include Her::Model
end

class Moviezz

  def initialize
    @moviez = []
    @save_failed = []
  end

  def search(data)
    @data = data
    search_with_all_attributes
    handle_search_result
  end

  def map_found_many
    progress_bar = ProgressBar.new @moviez.length, *PROGRESS_BAR_OPTIONS
    @moviez.each do |movie|
      unless movie[:result].respond_to?(:each)
        progress_bar.increment!
        next
      end
      puts "Data from videodb: #{movie[:data][:title]} - #{movie[:data][:subtitle]} (#{movie[:data][:year]})"
      table = Terminal::Table.new headings: ['ID', 'Title', 'Year'] do |t|
        movie[:result].each do |result|
          t << [result.id, result.title, result.year]
        end
      end
      puts table
      id = ask('ID to use: ', Integer) do |q|
        q.default = movie[:result].first.id
        q.in = (movie[:result].map { |m| m.id }).push(-1)
      end
      movie[:result] = movie[:result].find { |m| m.id == id.to_i }
      progress_bar.increment!
    end
  end

  def display_not_found_movies
    puts "Movies which could not be found"
    table = Terminal::Table.new headings: ['Title', 'Subtitle', 'Year', 'DiskID'] do |t|
      @moviez.each do |movie|
        next unless movie[:result].nil?
        t << [movie[:data][:title], movie[:data][:subtitle], movie[:data][:year], movie[:data][:diskid]]
      end
    end
    puts table
  end

  def display_save_failed_movies
    puts "Errors when saving the movies"
    table = Terminal::Table.new headings: ['TMDB ID', 'Title', 'DiskID', 'Errors'] do |t|
      @save_failed.each do |movie|
        errors = movie[:errors].map do |field,errs|
          errs.map do |err|
            "#{field} #{err}"
          end.join("\n")
        end.join("\n")
        t << [movie[:tmdb_id], movie[:title], movie[:disc_number], errors]
      end
    end
    puts table
  end

  def add
    progress_bar = ProgressBar.new @moviez.length, *PROGRESS_BAR_OPTIONS
    @moviez.each do |movie|
      unless movie[:result]
        progress_bar.increment!
        next
      end

      new_movie = Movie.new(tmdb_id: movie[:result].id, disc_number: movie[:data][:diskid])
      unless new_movie.save
        @save_failed << {
          tmdb_id: new_movie.tmdb_id,
          disc_number: new_movie.disc_number,
          errors: new_movie.errors,
          title: movie[:result][:title]
        }
      end
      progress_bar.increment!
    end
  end

  private
  def handle_search_result(exclude_none = false)
    case
    when (@search.length == 0 and not exclude_none)
      found_none
    when @search.length == 1
      found_one
    when @search.length > 1
      found_many
    end
  end

  def search_with_all_attributes
    string = "#{@data[:title]} #{@data[:subtitle]} #{@data[:year]}"
    @search = TMDBMovie.find_by_title(string)
  end

  def search_with_title_subtitle
    string = "#{@data[:title]} #{@data[:subtitle]}"
    @search = TMDBMovie.find_by_title(string)
  end

  def search_with_title
    string = "#{@data[:title]}"
    @search = TMDBMovie.find_by_title(string)
  end

  def found_none
    return handle_search_result(true) unless search_with_title_subtitle.empty?
    return handle_search_result(true) unless search_with_title.empty?
    @search = nil
    add_to_moviez
  end

  def found_one
    @search = @search.first
    add_to_moviez
  end

  def add_to_moviez
    @moviez << {data: @data, result: @search}
  end

  def found_many
    add_to_moviez
  end

end

mysql = Mysql2::Client.new host: VIDEODB_HOST, username: VIDEODB_USER, password: VIDEODB_PASS, database: VIDEODB_DATABASE
#result = mysql.query 'SELECT title, subtitle, diskid, year FROM videodata LIMIT 1'
result = mysql.query 'SELECT title, subtitle, diskid, year FROM videodata'

migrate_data = []
result.each(symbolize_keys: true) do |row|
  migrate_data << row
end

progress_bar = ProgressBar.new migrate_data.length, *PROGRESS_BAR_OPTIONS
moviezz = Moviezz.new
migrate_data.each do |data|
  moviezz.search(data)
  progress_bar.increment!
end
moviezz.map_found_many
moviezz.add
moviezz.display_not_found_movies
moviezz.display_save_failed_movies
